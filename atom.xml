<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>scarecrow</title>
  <subtitle>年少，年少，行乐直须及早</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://scarecrow.pub/"/>
  <updated>2017-04-27T16:45:06.483Z</updated>
  <id>http://scarecrow.pub/</id>
  
  <author>
    <name>scarecrow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指offer--二叉树</title>
    <link href="http://scarecrow.pub/2017/04/28/%E5%89%91%E6%8C%87offer-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://scarecrow.pub/2017/04/28/剑指offer-二叉树/</id>
    <published>2017-04-27T16:41:55.000Z</published>
    <updated>2017-04-27T16:45:06.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树深度"><a href="#二叉树深度" class="headerlink" title="二叉树深度"></a>二叉树深度</h1><p>题目描述：<br>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。<br>求二叉树的深度，有三种方法： </p>
<ol>
<li>递归，这也是很多人非常容易想到的 </li>
<li>循环，这种方法不会有递归方法容易出现的栈溢出风险。<a id="more"></a>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2></li>
</ol>
<p>分析：如果该树只有一个结点，它的深度为1.如果根节点只有左子树没有右子树，那么树的深度为左子树的深度加1；同样，如果只有右子树没有左子树，那么树的深度为右子树的深度加1。如果既有左子树也有游资是，那该树的深度就是左子树和右子树的最大值加1.<br>这个思路用递归实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTreeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Math.max(getTreeDepth(root.left), getTreeDepth(root.right)) + <span class="number">1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>上述递归也可以改为循环：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.Queue;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">      <span class="comment">// return Math.max(TreeDepth(root.left), TreeDepth(root.right)) + 1;</span></div><div class="line">                Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        queue.offer(root);</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>, depth = <span class="number">0</span>, nextCount = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">            TreeNode node = queue.poll();</div><div class="line">            count ++;</div><div class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</div><div class="line">                queue.offer(node.left);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</div><div class="line">                queue.offer(node.right);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (count == nextCount) &#123;</div><div class="line">                nextCount = queue.size();</div><div class="line">                count = <span class="number">0</span>;</div><div class="line">                depth ++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> depth;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述方式是先知道下一层树的个数，然后count++，相等时候，结束一层的层序遍历。</p>
<p>也可以先知道该层的个数，然后–；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.Queue;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 10648 on 2017/4/13 0013.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeDepth</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        q.offer(root);</div><div class="line">        <span class="keyword">int</span> depth = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</div><div class="line">            <span class="keyword">int</span> size = q.size();</div><div class="line">            <span class="keyword">while</span> (size -- &gt; <span class="number">0</span>) &#123;</div><div class="line">                TreeNode node = q.poll();</div><div class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</div><div class="line">                    q.offer(node.left);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</div><div class="line">                    q.offer(node.right);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            depth ++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> depth;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="判断该树是不是平衡二叉树"><a href="#判断该树是不是平衡二叉树" class="headerlink" title="判断该树是不是平衡二叉树"></a>判断该树是不是平衡二叉树</h1><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。<br>首先，什么是平衡二叉树？如果二叉树中任意结点的左右子树深度相差不超过1，那么它就是平衡二叉树。</p>
<h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><p>有了求二叉树的深度的经验之后，很容易想到一个思路：遍历每个结点的时候，得到它的左右结点的深度。如果每个结点的左右二叉树的深度相差都不超过1，就是平衡二叉树。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsBalanced_Solution</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> left = getTreeDepth(root.left);</div><div class="line">        <span class="keyword">int</span> right = getTreeDepth(root.right);</div><div class="line">        <span class="keyword">if</span> (Math.abs(left - right) &gt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> IsBalanced_Solution(root.right) &amp;&amp; IsBalanced_Solution(root.left);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTreeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Math.max(getTreeDepth(root.left), getTreeDepth(root.right)) + <span class="number">1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>但是这个方法每个结点被重复遍历，效率不高。</p>
<h2 id="自底向上"><a href="#自底向上" class="headerlink" title="自底向上"></a>自底向上</h2><p>另一个思路：<br>如果我们用后序遍历的方式遍历二叉树的每一个结点，在遍历到一个结点之前我们就已经遍历了它的左右子树。只要在遍历每个结点的时候几下它的深度，就可以一次遍历判断每个结点是不是平衡二叉树。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsBalanced_Solution2</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] depth = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> isBalancedCore(root, depth);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalancedCore</span><span class="params">(TreeNode node, <span class="keyword">int</span>[] length)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</div><div class="line">            length[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (isBalancedCore(node.left, left) &amp;&amp; isBalancedCore(node.right, right)) &#123;</div><div class="line">            <span class="keyword">if</span> (Math.abs(left[<span class="number">0</span>] - right[<span class="number">0</span>]) &lt;= <span class="number">1</span>) &#123;</div><div class="line">                length[<span class="number">0</span>] = Math.max(left[<span class="number">0</span>], right[<span class="number">0</span>]) + <span class="number">1</span>;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二叉树深度&quot;&gt;&lt;a href=&quot;#二叉树深度&quot; class=&quot;headerlink&quot; title=&quot;二叉树深度&quot;&gt;&lt;/a&gt;二叉树深度&lt;/h1&gt;&lt;p&gt;题目描述：&lt;br&gt;输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。&lt;br&gt;求二叉树的深度，有三种方法： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;递归，这也是很多人非常容易想到的 &lt;/li&gt;
&lt;li&gt;循环，这种方法不会有递归方法容易出现的栈溢出风险。
    
    </summary>
    
      <category term="算法" scheme="http://scarecrow.pub/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="algorithm" scheme="http://scarecrow.pub/tags/algorithm/"/>
    
      <category term="java" scheme="http://scarecrow.pub/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>双脚站立稻草人测试文章</title>
    <link href="http://scarecrow.pub/2017/04/23/%E5%8F%8C%E8%84%9A%E7%AB%99%E7%AB%8B%E7%A8%BB%E8%8D%89%E4%BA%BA%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <id>http://scarecrow.pub/2017/04/23/双脚站立稻草人测试文章/</id>
    <published>2017-04-23T14:55:00.000Z</published>
    <updated>2017-04-26T04:26:42.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一张小图片"><a href="#一张小图片" class="headerlink" title="一张小图片"></a>一张小图片</h1><p><img src="http://i.imgur.com/qQ1yhCM.jpg" alt=""></p>
<hr>
<h2 id="newton插值多项式计算"><a href="#newton插值多项式计算" class="headerlink" title="newton插值多项式计算"></a>newton插值多项式计算</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j,k, m = <span class="number">6</span>;  </div><div class="line"><span class="keyword">double</span> x[<span class="number">6</span>] = &#123; <span class="number">0.7</span>, <span class="number">0.9</span>, <span class="number">1.1</span>, <span class="number">1.3</span>, <span class="number">1.5</span>, <span class="number">1.7</span> &#125;;</div><div class="line"><span class="keyword">double</span>	z[<span class="number">6</span>] = &#123; <span class="number">0.6442</span>, <span class="number">0.7833</span>, <span class="number">0.8912</span>, <span class="number">0.9636</span>, <span class="number">0.9975</span>, <span class="number">0.9917</span> &#125;;</div><div class="line"><span class="keyword">double</span>	y[<span class="number">6</span>][<span class="number">6</span>];</div><div class="line"><span class="keyword">double</span> xx = <span class="number">1</span>, nx = <span class="number">0</span>,w=<span class="number">1</span>,r;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)&#123;</div><div class="line">y[i][i] = z[i];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= <span class="number">5</span>; k++)&#123;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">5</span> - k; i++)</div><div class="line">y[i][i + k] = (y[i + <span class="number">1</span>][i + k] - y[i][i + k - <span class="number">1</span>]) / (x[i + k] - x[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;  	</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%0.1f  "</span>, x[i]);   </div><div class="line"><span class="keyword">for</span>(j = i;j&gt;=<span class="number">0</span>;j--)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%f  "</span>, y[j][i]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (i =<span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</div><div class="line"><span class="keyword">double</span> temp = y[<span class="number">0</span>][i];</div><div class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++)</div><div class="line">temp *= (xx - x[j]);</div><div class="line">nx += temp;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</div><div class="line">w*=(xx - x[j]);</div><div class="line">r=y[<span class="number">0</span>][<span class="number">5</span>]*w;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d点Newton插值多项式计算得y(%.0f)=%f\n"</span>, m, xx, nx+r);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>真好看嘻嘻</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一张小图片&quot;&gt;&lt;a href=&quot;#一张小图片&quot; class=&quot;headerlink&quot; title=&quot;一张小图片&quot;&gt;&lt;/a&gt;一张小图片&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/qQ1yhCM.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;newton插值多项式计算&quot;&gt;&lt;a href=&quot;#newton插值多项式计算&quot; class=&quot;headerlink&quot; title=&quot;newton插值多项式计算&quot;&gt;&lt;/a&gt;newton插值多项式计算&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, j,k, m = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; x[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;] = &amp;#123; &lt;span class=&quot;number&quot;&gt;0.7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.7&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;	z[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;] = &amp;#123; &lt;span class=&quot;number&quot;&gt;0.6442&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.7833&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.8912&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.9636&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.9975&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.9917&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;	y[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; xx = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, nx = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,w=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,r;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt;= &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y[i][i] = z[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (k = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; k &amp;lt;= &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; k++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt;= &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; - k; i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y[i][i + k] = (y[i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][i + k] - y[i][i + k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) / (x[i + k] - x[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;; i++)&amp;#123;  	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%0.1f  &quot;&lt;/span&gt;, x[i]);   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(j = i;j&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j--)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%f  &quot;&lt;/span&gt;, y[j][i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i =&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; temp = y[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; i; j++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;temp *= (xx - x[j]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nx += temp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;; j++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;w*=(xx - x[j]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r=y[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]*w;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d点Newton插值多项式计算得y(%.0f)=%f\n&quot;&lt;/span&gt;, m, xx, nx+r);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://scarecrow.pub/categories/Diary/"/>
    
    
      <category term="test" scheme="http://scarecrow.pub/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://scarecrow.pub/2017/04/23/hello-world/"/>
    <id>http://scarecrow.pub/2017/04/23/hello-world/</id>
    <published>2017-04-23T14:05:23.300Z</published>
    <updated>2017-04-23T14:05:23.300Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
